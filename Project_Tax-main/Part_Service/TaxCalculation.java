package Part_Service;

import java.io.*;
import java.util.*;

public class TaxCalculation {

    public static void calculateTax(String userId, String year) {
        File inputFile = new File("user_data.csv");
        File outputFile = new File("taxhistory.csv");

        if (!inputFile.exists()) {
            System.err.println("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå user_data.csv");
            return;
        }

        List<String> history = new ArrayList<>();
        if (outputFile.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(outputFile))) {
                String line;
                while ((line = br.readLine()) != null) {
                    history.add(line);
                }
            } catch (IOException e) {
                System.err.println("‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå taxhistory.csv ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                e.printStackTrace();
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ header ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡πÑ‡∏ó‡∏¢
        if (history.isEmpty()) {
            history.add("UserID,Year,‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°,‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô,‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥,‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢");
        }

        try (BufferedReader br = new BufferedReader(new FileReader(inputFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.trim().isEmpty() || line.startsWith("UserID")) continue;

                String[] data = line.split(",", -1);
                if (data.length < 17) continue;
                if (!data[0].equals(userId) || !data[1].equals(year)) continue;

                System.out.println("‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: " + userId + " | ‡∏õ‡∏µ " + year);

                // ===== (‡∏ä‡πà‡∏≠‡∏á 3 + ‡∏ä‡πà‡∏≠‡∏á 4)*12 + ‡∏ä‡πà‡∏≠‡∏á 5 =====
                double monthlySalary = parseDouble(data[2]); // ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å
                double otherMonthly = parseDouble(data[3]);  // ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                double bonus = parseDouble(data[4]);         // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™
                double totalIncome = (monthlySalary + otherMonthly) * 12 + bonus;

                // ===== ‡∏ä‡πà‡∏≠‡∏á 6‚Äì16 ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î =====
                double totalDeduction = 0;
                for (int i = 5; i <= 16 && i < data.length; i++) {
                    totalDeduction += parseDouble(data[i]);
                }

                // ===== ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ =====
                double netIncome = Math.max(totalIncome - totalDeduction, 0);
                System.out.println("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: " + totalIncome);
                System.out.println("‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô: " + totalDeduction);
                System.out.println("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: " + netIncome);

                // ===== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡πÑ‡∏î =====
                double tax = calculateProgressiveTax(netIncome);
                System.out.println("üí∏ ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢: " + tax);

                // ===== ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á userId + year =====
                history.removeIf(h -> h.startsWith(userId + "," + year + ","));

                // ===== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà =====
                history.add(userId + "," + year + "," +
                        format(totalIncome) + "," +
                        format(totalDeduction) + "," +
                        format(netIncome) + "," +
                        format(tax));
            }

            // ===== ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà =====
            try (FileWriter fw = new FileWriter(outputFile, false)) {
                for (String l : history) fw.write(l + "\n");
            }

            System.out.println("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô taxhistory.csv ‡πÅ‡∏•‡πâ‡∏ß");

        } catch (IOException e) {
            System.err.println("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ");
            e.printStackTrace();
        }
    }

    // ===== ‡∏†‡∏≤‡∏©‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡πÑ‡∏î =====
    private static double calculateProgressiveTax(double income) {
        if (income <= 150000) return 0;

        double[][] brackets = {
            {150000, 0.00},
            {300000, 0.05},
            {500000, 0.10},
            {750000, 0.15},
            {1000000, 0.20},
            {2000000, 0.25},
            {5000000, 0.30},
            {Double.MAX_VALUE, 0.35}
        };

        double tax = 0;
        double lastLimit = 0;

        for (double[] b : brackets) {
            double limit = b[0];
            double rate = b[1];
            if (income > limit) {
                tax += (limit - lastLimit) * rate;
                lastLimit = limit;
            } else {
                tax += (income - lastLimit) * rate;
                break;
            }
        }

        return tax;
    }

    // ===== Helper: ‡πÅ‡∏õ‡∏•‡∏á String ‚Üí Double =====
    private static double parseDouble(String s) {
        try {
            return Double.parseDouble(s.trim().replace(",", ""));
        } catch (Exception e) {
            return 0;
        }
    }

    // ===== Helper: ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏ß‡∏¢ ‡πÜ =====
    private static String format(double n) {
        if (Math.abs(n - Math.round(n)) < 0.001)
            return String.valueOf((long) Math.round(n));
        else
            return String.format("%.2f", n);
    }
}
